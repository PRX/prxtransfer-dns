AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Hosted zone and record sets for prxtransfer.org

Parameters:
  Domain:
    Default: prxtransfer.org.
    Description: The domain name and hosted zone
    Type: String

  StagNlbHostnameUSEAST1: { Type: String }
  StagNlbHostnameUSWEST2: { Type: String }

  ProdNlbHostnameUSEAST1: { Type: String }
  ProdNlbHostnameUSWEST2: { Type: String }

  ProdHealthCheckIdsTargetingUSEAST1: { Type: CommaDelimitedList }
  ProdHealthCheckIdsTargetingUSWEST2: { Type: CommaDelimitedList }

Conditions:
  CreateProdHealthCheckUSEAST1: !Not [!Equals [!Join ["", !Ref ProdHealthCheckIdsTargetingUSEAST1], ""]]
  CreateProdHealthCheckUSWEST2: !Not [!Equals [!Join ["", !Ref ProdHealthCheckIdsTargetingUSWEST2], ""]]

Resources:
  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneConfig:
        Comment: Broadcast FTP pull delivery
      HostedZoneTags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: Broadcast Delivery }
      Name: !Ref Domain

  ##############################################################################
  # FTP SERVER RECORD SETS
  ##############################################################################

  ProductionWildcards:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: Production FTP domains
      HostedZoneId: !GetAtt HostedZone.Id
      RecordSets:
        # Production wildcard traffic. All production traffic from stations
        # would be expected to handled by one of these.
        #
        # THEY ALL RESOLVE TO THE SAME NETWORK LOAD BALANCER!!
        #
        # - prxtransfer.org (shouldn't be in use by anyone)
        # - *.prxtransfer.org (all legacy traffic)
        # - *.station.prxtransfer.org (stations that opted in to Transfer Family early)
        # - *.east.prxtransfer.org (Legacy routing for a few stations to hit specific server locations)
        # - *.west.prxtransfer.org (Legacy routing for a few stations to hit specific server location)
        # - *.west1.prxtransfer.org (Legacy routing for a few stations to hit specific server locations)
        - Name: !Ref Domain
          AliasTarget:
            DNSName: !Ref ProdNlbHostnameUSEAST1
            EvaluateTargetHealth: true
            HostedZoneId: Z26RNL4JYFTOTI
          HealthCheckId: !If [CreateProdHealthCheckUSEAST1, !GetAtt ProdUsEast1HealthCheck.HealthCheckId, !Ref AWS::NoValue]
          Region: us-east-1
          SetIdentifier: !Sub ${AWS::StackName}-prod-us-east-1
          Type: A
        - Name: !Ref Domain
          AliasTarget:
            DNSName: !Ref ProdNlbHostnameUSWEST2
            EvaluateTargetHealth: true
            HostedZoneId: Z18D5FSROUN65G
          HealthCheckId: !If [CreateProdHealthCheckUSWEST2, !GetAtt ProdUsWest2HealthCheck.HealthCheckId, !Ref AWS::NoValue]
          Region: us-west-2
          SetIdentifier: !Sub ${AWS::StackName}-prod-us-west-2
          Type: A

        - Name: !Sub "*.${Domain}"
          AliasTarget:
            DNSName: !Ref ProdNlbHostnameUSEAST1
            EvaluateTargetHealth: true
            HostedZoneId: Z26RNL4JYFTOTI
          HealthCheckId: !If [CreateProdHealthCheckUSEAST1, !GetAtt ProdUsEast1HealthCheck.HealthCheckId, !Ref AWS::NoValue]
          Region: us-east-1
          SetIdentifier: !Sub ${AWS::StackName}-prod-us-east-1
          Type: A
        - Name: !Sub "*.${Domain}"
          AliasTarget:
            DNSName: !Ref ProdNlbHostnameUSWEST2
            EvaluateTargetHealth: true
            HostedZoneId: Z18D5FSROUN65G
          HealthCheckId: !If [CreateProdHealthCheckUSWEST2, !GetAtt ProdUsWest2HealthCheck.HealthCheckId, !Ref AWS::NoValue]
          Region: us-west-2
          SetIdentifier: !Sub ${AWS::StackName}-prod-us-west-2
          Type: A

        - Name: !Sub "*.station.${Domain}"
          AliasTarget:
            DNSName: !Ref ProdNlbHostnameUSEAST1
            EvaluateTargetHealth: true
            HostedZoneId: Z26RNL4JYFTOTI
          HealthCheckId: !If [CreateProdHealthCheckUSEAST1, !GetAtt ProdUsEast1HealthCheck.HealthCheckId, !Ref AWS::NoValue]
          Region: us-east-1
          SetIdentifier: !Sub ${AWS::StackName}-prod-us-east-1
          Type: A
        - Name: !Sub "*.station.${Domain}"
          AliasTarget:
            DNSName: !Ref ProdNlbHostnameUSWEST2
            EvaluateTargetHealth: true
            HostedZoneId: Z18D5FSROUN65G
          HealthCheckId: !If [CreateProdHealthCheckUSWEST2, !GetAtt ProdUsWest2HealthCheck.HealthCheckId, !Ref AWS::NoValue]
          Region: us-west-2
          SetIdentifier: !Sub ${AWS::StackName}-prod-us-west-2
          Type: A

        - Name: !Sub "*.east.${Domain}"
          AliasTarget:
            DNSName: !Ref ProdNlbHostnameUSEAST1
            EvaluateTargetHealth: true
            HostedZoneId: Z26RNL4JYFTOTI
          HealthCheckId: !If [CreateProdHealthCheckUSEAST1, !GetAtt ProdUsEast1HealthCheck.HealthCheckId, !Ref AWS::NoValue]
          Region: us-east-1
          SetIdentifier: !Sub ${AWS::StackName}-prod-us-east-1
          Type: A
        - Name: !Sub "*.east.${Domain}"
          AliasTarget:
            DNSName: !Ref ProdNlbHostnameUSWEST2
            EvaluateTargetHealth: true
            HostedZoneId: Z18D5FSROUN65G
          HealthCheckId: !If [CreateProdHealthCheckUSWEST2, !GetAtt ProdUsWest2HealthCheck.HealthCheckId, !Ref AWS::NoValue]
          Region: us-west-2
          SetIdentifier: !Sub ${AWS::StackName}-prod-us-west-2
          Type: A

        - Name: !Sub "*.west.${Domain}"
          AliasTarget:
            DNSName: !Ref ProdNlbHostnameUSEAST1
            EvaluateTargetHealth: true
            HostedZoneId: Z26RNL4JYFTOTI
          HealthCheckId: !If [CreateProdHealthCheckUSEAST1, !GetAtt ProdUsEast1HealthCheck.HealthCheckId, !Ref AWS::NoValue]
          Region: us-east-1
          SetIdentifier: !Sub ${AWS::StackName}-prod-us-east-1
          Type: A
        - Name: !Sub "*.west.${Domain}"
          AliasTarget:
            DNSName: !Ref ProdNlbHostnameUSWEST2
            EvaluateTargetHealth: true
            HostedZoneId: Z18D5FSROUN65G
          HealthCheckId: !If [CreateProdHealthCheckUSWEST2, !GetAtt ProdUsWest2HealthCheck.HealthCheckId, !Ref AWS::NoValue]
          Region: us-west-2
          SetIdentifier: !Sub ${AWS::StackName}-prod-us-west-2
          Type: A

        - Name: !Sub "*.west1.${Domain}"
          AliasTarget:
            DNSName: !Ref ProdNlbHostnameUSEAST1
            EvaluateTargetHealth: true
            HostedZoneId: Z26RNL4JYFTOTI
          HealthCheckId: !If [CreateProdHealthCheckUSEAST1, !GetAtt ProdUsEast1HealthCheck.HealthCheckId, !Ref AWS::NoValue]
          Region: us-east-1
          SetIdentifier: !Sub ${AWS::StackName}-prod-us-east-1
          Type: A
        - Name: !Sub "*.west1.${Domain}"
          AliasTarget:
            DNSName: !Ref ProdNlbHostnameUSWEST2
            EvaluateTargetHealth: true
            HostedZoneId: Z18D5FSROUN65G
          HealthCheckId: !If [CreateProdHealthCheckUSWEST2, !GetAtt ProdUsWest2HealthCheck.HealthCheckId, !Ref AWS::NoValue]
          Region: us-west-2
          SetIdentifier: !Sub ${AWS::StackName}-prod-us-west-2
          Type: A

  StagingWildcards:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: Staging FTP domains
      HostedZoneId: !GetAtt HostedZone.Id
      RecordSets:
        # Staging traffic
        # - staging.prxtransfer.org
        # - *.staging.prxtransfer.org
        # - *.station.staging.prxtransfer.org
        # Does NOT support regional wildcard domains that used to be used in
        # production, such as *.east.staging.prxtransfer.org.
        #
        # No one should be using staging domains except for us for internal
        # testing
        - Name: !Sub staging.${Domain}
          AliasTarget:
            DNSName: !Ref StagNlbHostnameUSEAST1
            EvaluateTargetHealth: true
            HostedZoneId: Z26RNL4JYFTOTI
          Region: us-east-1
          SetIdentifier: !Sub ${AWS::StackName}-stag-us-east-1
          Type: A
        - Name: !Sub staging.${Domain}
          AliasTarget:
            DNSName: !Ref StagNlbHostnameUSWEST2
            EvaluateTargetHealth: true
            HostedZoneId: Z18D5FSROUN65G
          Region: us-west-2
          SetIdentifier: !Sub ${AWS::StackName}-stag-us-west-2
          Type: A

        - Name: !Sub "*.staging.${Domain}"
          AliasTarget:
            DNSName: !Ref StagNlbHostnameUSEAST1
            EvaluateTargetHealth: true
            HostedZoneId: Z26RNL4JYFTOTI
          Region: us-east-1
          SetIdentifier: !Sub ${AWS::StackName}-stag-us-east-1
          Type: A
        - Name: !Sub "*.staging.${Domain}"
          AliasTarget:
            DNSName: !Ref StagNlbHostnameUSWEST2
            EvaluateTargetHealth: true
            HostedZoneId: Z18D5FSROUN65G
          Region: us-west-2
          SetIdentifier: !Sub ${AWS::StackName}-stag-us-west-2
          Type: A

        - Name: !Sub "*.station.staging.${Domain}"
          AliasTarget:
            DNSName: !Ref StagNlbHostnameUSEAST1
            EvaluateTargetHealth: true
            HostedZoneId: Z26RNL4JYFTOTI
          Region: us-east-1
          SetIdentifier: !Sub ${AWS::StackName}-stag-us-east-1
          Type: A
        - Name: !Sub "*.station.staging.${Domain}"
          AliasTarget:
            DNSName: !Ref StagNlbHostnameUSWEST2
            EvaluateTargetHealth: true
            HostedZoneId: Z18D5FSROUN65G
          Region: us-west-2
          SetIdentifier: !Sub ${AWS::StackName}-stag-us-west-2
          Type: A

  ##############################################################################
  # OTHER RECORD SETS
  ##############################################################################

  # Service-specific
  AwsAcmLegacy:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: AWS ACM validation records for prx-legacy
      HostedZoneId: !Ref HostedZone
      RecordSets:
        # *.prxtransfer.org
        - Name: !Sub _076a6a73853f02e920a0e0dd35c5a602.${Domain}
          ResourceRecords:
            - _0f113259cc3f78e525d0f61450f9f7b3.vrztfgqhxj.acm-validations.aws.
          TTL: "3600"
          Type: CNAME
        # *.station.prxtransfer.org
        - Name: !Sub _041f0e1c6cca23dc2454c37ef77900d1.station.${Domain}
          ResourceRecords:
            - _928a0424ecc27464f39996ea0b9487fb.vrztfgqhxj.acm-validations.aws.
          TTL: "3600"
          Type: CNAME
        # *.staging.prxtransfer.org
        - Name: !Sub _d6d262b369914b25a15b2c92d7d4ecaf.staging.${Domain}
          ResourceRecords:
            - _cf6ee97e3845eac0c69882a0133abc69.vrztfgqhxj.acm-validations.aws.
          TTL: "3600"
          Type: CNAME
        # *.station.staging.prxtransfer.org
        - Name: !Sub _a09679bc6ff048a874fc4163e4627a41.station.staging.${Domain}
          ResourceRecords:
            - _132bb980af32bd41ad8791537c792987.vrztfgqhxj.acm-validations.aws.
          TTL: "3600"
          Type: CNAME

  ##############################################################################
  # HEALTH CHECKS
  ##############################################################################

  # This health check determines if the us-east-1 FTP server is included in
  # the active DNS pool. If this health check in UNHEALTHY, the us-east-1
  # server will be removed from active duty until the health check recovers.
  ProdUsEast1HealthCheck:
    Type: AWS::Route53::HealthCheck
    Condition: CreateProdHealthCheckUSEAST1
    Properties:
      HealthCheckConfig:
        ChildHealthChecks: !Ref ProdHealthCheckIdsTargetingUSEAST1
        HealthThreshold: 1 # Should always be 1
        Type: CALCULATED
      HealthCheckTags:
        - { Key: Name, Value: delivery_prod_us-east-1 }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: Broadcast Delivery }
  # This alarm does **not** have any influence over DNS records. It is used
  # solely for visibility. When the health check becomes UNHEALTHY, the alarm
  # will move into an ALARM state, which sends alerts/etc.
  # ProdUsEast1HealthCheckAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Condition: CreateProdHealthCheckUSEAST1
  #   Properties:
  #     AlarmName: !Sub FATAL [FTP] us-east-1 Server Connectivity <prod> UNHEALTHY (${AWS::StackName})
  #     AlarmDescription: >-
  #       All connection tests for prodoction us-east-1 FTP servers are failing.
  #       This likely means there is a service issue with Transfer Family,
  #       Lambda, or RDS in us-east-1.

  #       By the time this alarm has been triggered, the region has already been
  #       removed from the DNS pool.
  #     ComparisonOperator: LessThanThreshold
  #     Dimensions:
  #       - Name: HealthCheckId
  #         Value: !GetAtt ProdUsEast1HealthCheck.HealthCheckId
  #     EvaluationPeriods: 1
  #     MetricName: HealthCheckStatus
  #     Namespace: AWS/Route53
  #     Period: 60
  #     Statistic: Minimum
  #     Threshold: 1
  #     TreatMissingData: breaching

  # This health check determines if the us-west-2 FTP server is included in
  # the active DNS pool. If this health check in UNHEALTHY, the us-west-2
  # server will be removed from active duty until the health check recovers.
  ProdUsWest2HealthCheck:
    Type: AWS::Route53::HealthCheck
    Condition: CreateProdHealthCheckUSWEST2
    Properties:
      HealthCheckConfig:
        ChildHealthChecks: !Ref ProdHealthCheckIdsTargetingUSWEST2
        HealthThreshold: 1 # Should always be 1
        Type: CALCULATED
      HealthCheckTags:
        - { Key: Name, Value: delivery_prod_us-west-2 }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: Broadcast Delivery }
  # This alarm does **not** have any influence over DNS records. It is used
  # solely for visibility. When the health check becomes UNHEALTHY, the alarm
  # will move into an ALARM state, which sends alerts/etc.
  # ProdUsWest2HealthCheckAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Condition: CreateProdHealthCheckUSWEST2
  #   Properties:
  #     AlarmName: !Sub FATAL [FTP] us-west-2 Server Connectivity <prod> UNHEALTHY (${AWS::StackName})
  #     AlarmDescription: >-
  #       All connection tests for prodoction us-west-2 FTP servers are failing.
  #       This likely means there is a service issue with Transfer Family,
  #       Lambda, or RDS in us-west-2.

  #       By the time this alarm has been triggered, the region has already been
  #       removed from the DNS pool.
  #     ComparisonOperator: LessThanThreshold
  #     Dimensions:
  #       - Name: HealthCheckId
  #         Value: !GetAtt ProdUsWest2HealthCheck.HealthCheckId
  #     EvaluationPeriods: 1
  #     MetricName: HealthCheckStatus
  #     Namespace: AWS/Route53
  #     Period: 60
  #     Statistic: Minimum
  #     Threshold: 1
  #     TreatMissingData: breaching
